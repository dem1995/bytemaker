{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "BitVector\n",
    "============\n",
    "BitVector is a class that allows for bit-level manipulation of data. It is designed to have all the\n",
    "functionality of Python's built-in bytearray class, and to that end, it supports almost all of the\n",
    "same methods, but with bit-level granularity.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bytemaker.bitvector import BitVector\n",
    "from bitarray import bitarray"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construction\n",
    "BitVector has almost all of the same construction options as bytearray.\n",
    "In the case where it does not (string encoding), a constructed ByteArray or String bittype can be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Default construction:\n",
      "bytearray(b'')\n",
      "BitVector('')\n",
      "------------------------------------------------\n",
      "List construction:\n",
      "bytearray(b'\\x01\\x02\\x03\\x02\\xff')\n",
      "BitVector('01101')\n",
      "------------------------------------------------\n",
      "Bytes construction:\n",
      "bytearray(b'Hello, World!')\n",
      "BitVector('01001000 01100101 01101100 01101100 01101111 00101100 00100000 01010111 01101111 01110010 01101100 01100100 00100001')\n",
      "------------------------------------------------\n",
      "Int construction:\n",
      "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n",
      "BitVector('00000000 00')\n",
      "------------------------------------------------\n",
      "String construction:\n",
      "bytearray(b'\\xff\\xfeH\\x00e\\x00l\\x00l\\x00o\\x00,\\x00 \\x00W\\x00o\\x00r\\x00l\\x00d\\x00!\\x00')\n",
      "BitVector('11111111 11111110 01001000 00000000 01100101 00000000 01101100 00000000 01101100 00000000 01101111 00000000 00101100 00000000 00100000 00000000 01010111 00000000 01101111 00000000 01110010 00000000 01101100 00000000 01100100 00000000 00100001 00000000')\n"
     ]
    }
   ],
   "source": [
    "# Default constructor\n",
    "ba_empty = bytearray()\n",
    "bv_empty = BitVector()\n",
    "print(f\"Default construction:\\n{ba_empty}\\n{bv_empty}\")\n",
    "print(\"------------------------------------------------\")\n",
    "# Construct from list\n",
    "ba = bytearray([1, 2, 3, 2, 255])\n",
    "bv = BitVector([0, 1, 1, 0, 1])\n",
    "print(f\"List construction:\\n{ba}\\n{bv}\")\n",
    "print(\"------------------------------------------------\")\n",
    "# Construct from bytes\n",
    "ba = bytearray(b\"Hello, World!\")\n",
    "bv = BitVector(b\"Hello, World!\")\n",
    "print(f\"Bytes construction:\\n{ba}\\n{bv}\")\n",
    "print(\"------------------------------------------------\")\n",
    "# Construct from int\n",
    "ba = bytearray(10)\n",
    "bv = BitVector(10)\n",
    "print(f\"Int construction:\\n{ba}\\n{bv}\")\n",
    "print(\"------------------------------------------------\")\n",
    "# Construct from string\n",
    "ba = bytearray(\"Hello, World!\", \"utf-16\")\n",
    "# Unsupported for BitVector. However, the below is possible\n",
    "bv = BitVector(bytes(\"Hello, World!\", \"utf-16\"))\n",
    "print(f\"String construction:\\n{ba}\\n{bv}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "BitVectors can also be obtained by generating BitTypes objects from pythonic types and grabbing the underlying BitVector. See BitVector for more."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Presentation Options\n",
    "BitArray objects support the same presentation options as `bytearray`, and then some.\n",
    "Bits can be shown in binary, octal, hex, or a user-specified base. Each of these options supports custom separators and bytes-per-sep spacers. Finally, the  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'\\xff\\xfeH\\x00e\\x00l\\x00l\\x00o\\x00,\\x00 \\x00W\\x00o\\x00r\\x00l\\x00d\\x00s\\x00!\\x00'\n",
      "//5IAGUAbABsAG8ALAAgAFcAbwByAGwAZABzACEA\n",
      "0xfffe4800 65006c00 6c006f00 2c002000 57006f00 72006c00 64007300 2100\n",
      "0o77777110000624003300015400067400130000400005340033600162000660003100016300020400\n",
      "33333332_10200000_12110000_12300000_12300000_12330000_02300000_02000000_11130000_12330000_13020000_12300000_12100000_13030000_02010000\n",
      "0b111111111111111001001000000000000110010100000000011011000000000001101100000000000110111100000000001011000000000000100000000000000101011100000000011011110000000001110010000000000110110000000000011001000000000001110011000000000010000100000000\n",
      "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "Hello, Worlds!\n"
     ]
    }
   ],
   "source": [
    "the_bitvector = BitVector(bytes(\"Hello, Worlds!\", \"utf-16\"))\n",
    "print(bytes(the_bitvector))\n",
    "print(the_bitvector.tobase(64))\n",
    "print(the_bitvector.hex(sep=\" \", bytes_per_sep=4))\n",
    "print(the_bitvector.oct())\n",
    "print(the_bitvector.tobase(4, sep=\"_\", bytes_per_sep=2))\n",
    "print(the_bitvector.bin())\n",
    "print(list(the_bitvector))\n",
    "print(the_bitvector.to_chararray(encoding=\"utf-16\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `__bytes__` and the buffer protocol\n",
    "Additionally, BitVector supports `__bytes__`, meaning it can be readily cast to `bytes` objects. For non-byte-aligned BitVectors, additional zeros will be right-padded.\n",
    "\n",
    "#### Warning\n",
    "It can also be cast to `bytearray` objects, but please note that BitVector supports the\n",
    " Buffer protocol currently, meaning that `bytearray` objects constructed with BitVector objects\n",
    " will share memory with BitVector. This can lead to ambiguous results if the BitVector\n",
    " does not have a multiple of 8 bits (is not byte-aligned with its theoretical terminus). To get around this, cast to `bytes` first (which prioritizes `__bytes__`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From bytearray to BitVector:\n",
      "BitVector('01001000 01100101 01101100 01101100 01101111 00101100 00100000 01010111 01101111 01110010 01101100 01100100 00100001')\n",
      "From BitVector to bytearray:\n",
      "Unaligned: bytearray(b'\\xaa\\x12')\n",
      "Aligned: bytearray(b'\\xaa\\x10')\n"
     ]
    }
   ],
   "source": [
    "ba_1 = bytearray(b\"Hello, World!\")\n",
    "bv_1_unaligned = BitVector(\"10101010 0001\")\n",
    "\n",
    "ba_2 = bytearray(bv_1_unaligned)\n",
    "ba_2_with_alignment = bytearray(bytes(bv_1_unaligned))\n",
    "bv_2 = BitVector(ba_1)\n",
    "\n",
    "print(f\"From bytearray to BitVector:\\n{bv_2}\")\n",
    "print(f\"From BitVector to bytearray:\\nUnaligned: {ba_2}\\nAligned: {ba_2_with_alignment}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Magic Methods\n",
    "BitVector supports the following magic methods:\n",
    "\n",
    "Unary operations: `__invert__`\n",
    "Binary operations: `__and__`, `__or__`, `__xor__`, `__lshift__`, `__rshift__`, `__eq__`, `__ne__`, `__lt__`, `__le__`, `__gt__`, `__ge__`\n",
    "Shifting: `__lshift__`, `__rshift__`\n",
    "Indexing and iteration: `__getitem__`, `__setitem__`, `__delitem__`, `__len__`, `__iter__`\n",
    "String representation: `__str__`, `__repr__`, `__format__`\n",
    "Concatenation: `__add__`, `__radd__`, `__iadd__`, `__mul__`, `__rmul__`, `__imul__`\n",
    "Other: `__contains__`, `__sizeof__`, `__copy__`, `__deepcopy__`\n",
    "Right operations: `__rand__`, `__ror__`, `__rxor__`, `__rlshift__`, `__rrshift__`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial BitVector\n",
      "BitVector('11111000 0')\n",
      "Shifting by 3 << then >>\n",
      "BitVector('11000000 0')\n",
      "----------------------\n",
      "Concatenation\n",
      "BitVector bv: BitVector('00011000 0')\n",
      "bv2 = bv + bv: BitVector('00011000 00001100 00')\n",
      "bv3 = bv2 * 2: BitVector('00011000 00001100 00000110 00000011 0000')\n",
      "----------------------\n",
      "Bitwise operations\n",
      "BitVector('00011000 0') & BitVector('00110000 0') : BitVector('00010000 0')\n",
      "BitVector('00011000 0') | BitVector('00110000 0') : BitVector('00111000 0')\n",
      "~BitVector('00011000 0'): BitVector('11100111 1')\n",
      "----------------------\n",
      "Indexing\n",
      "[i for i in bv]: [0, 0, 0, 1, 1, 0, 0, 0, 0]\n",
      "[bv[i] for i in range(0, len(bv))]: [0, 0, 0, 1, 1, 0, 0, 0, 0]\n",
      "bv[0:4] BitVector('0001')\n",
      "----------------------\n",
      "Comparisons\n",
      "BitVector('00011000 0') == BitVector('00011000 0'): True\n",
      "BitVector('00011000 0') == BitVector('00001100 0'): BitVector('00001100 0')\n",
      "BitVector('00011000 0') < BitVector('00110000 0'): True\n"
     ]
    }
   ],
   "source": [
    "print(\"Initial BitVector\")\n",
    "bv = BitVector(\"111110000\")\n",
    "print(bv)\n",
    "print(\"Shifting by 3 << then >>\")\n",
    "bv = bv << 3\n",
    "print(bv)\n",
    "bv = bv >> 3\n",
    "print(\"----------------------\")\n",
    "print(\"Concatenation\")\n",
    "print(\"BitVector bv:\", bv)\n",
    "bv2 = bv + bv\n",
    "print(\"bv2 = bv + bv:\", bv2)\n",
    "bv3 = bv2 * 2\n",
    "print(\"bv3 = bv2 * 2:\", bv3)\n",
    "print(\"----------------------\")\n",
    "print(\"Bitwise operations\")\n",
    "bv1 = bv & bv << 1\n",
    "bv2 = bv | bv << 1\n",
    "print(bv, \"&\", bv<<1, \":\", bv1)\n",
    "print(bv, \"|\", bv<<1, \":\", bv2)\n",
    "print(f\"~{bv}:\", ~bv)\n",
    "print(\"----------------------\")\n",
    "print(\"Indexing\")\n",
    "print(\"[i for i in bv]:\", [i for i in bv])\n",
    "print(\"[bv[i] for i in range(0, len(bv))]:\", [bv[i] for i in range(0, len(bv))])\n",
    "print(\"bv[0:4]\", bv[0:4])\n",
    "print(\"----------------------\")\n",
    "print(\"Comparisons\")\n",
    "print(f\"{bv} == {bv}:\", bv == bv)\n",
    "print(f\"{bv} == {bv >> 1}:\", bv >> 1)\n",
    "print(f\"{bv} < {bv << 1}:\", bv < bv << 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Location and partitioning\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py312",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
